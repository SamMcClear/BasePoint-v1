// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  image     String?
  emailVerified DateTime?
  role      Role     @default(DEVELOPER)
  createdAt DateTime @default(now())

  // OAuth (NextAuth) support
  accounts Account[]
  sessions Session[]

  // App-specific relations
  connections        Connection[]      @relation("UserConnections")
  permissions        Permission[]      @relation("UserPermissions")
  grantedPermissions Permission[]      @relation("GrantedPermissions")
  logs               AuditLog[]
  activitySessions   ActivitySession[] @relation("UserSessions") // ✅ Fixed!
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Permission {
  id           Int         @id @default(autoincrement())
  userId       Int
  connectionId Int
  accessLevel  AccessLevel
  grantedById  Int?

  user       User       @relation("UserPermissions", fields: [userId], references: [id])
  grantedBy  User?      @relation("GrantedPermissions", fields: [grantedById], references: [id])
  connection Connection @relation(fields: [connectionId], references: [id])
  grantedAt  DateTime   @default(now())
}

model Connection {
  id         Int          @id @default(autoincrement())
  name       String
  dbType     DbType
  host       String
  port       Int
  username   String
  password   String
  database   String
  createdAt  DateTime     @default(now())
  ownerId    Int
  owner      User         @relation("UserConnections", fields: [ownerId], references: [id])
  sharedWith Permission[]
  AuditLog   AuditLog[]
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  userId       Int
  action       String
  connectionId Int
  metadata     Json
  timestamp    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  connection Connection @relation(fields: [connectionId], references: [id])
}

model ActivitySession {
  id        Int      @id @default(autoincrement())
  userId    Int
  ip        String
  userAgent String
  createdAt DateTime @default(now())

  user User @relation("UserSessions", fields: [userId], references: [id]) // ✅ Repaired
}

enum Role {
  ADMIN
  DEVELOPER
  VIEWER
}

enum DbType {
  POSTGRES
  MYSQL
  SQLITE
  MONGODB
}

enum AccessLevel {
  READ
  WRITE
  ADMIN
}
